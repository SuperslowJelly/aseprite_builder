name: Build and deploy Aseprite

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - master
  workflow_dispatch:

env:
  BUILD_TYPE: RelWithDebInfo
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  check-version:
    name: Check latest Aseprite release
    runs-on: ubuntu-latest
    outputs:
      download_url: ${{ steps.version_info.outputs.download_url }}
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      should_build: ${{ steps.should_build.outputs.should_build }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Get latest version info
        id: version_info
        run: |
          data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest)
          LATEST_TAG=$(echo "${data}" | jq -r '.tag_name')
          DOWNLOAD_URL=$(echo "${data}" | jq -r '.assets[].browser_download_url')
          VERSION_INFO=$(echo "${data}" | jq -r '.body')
          
          echo "${LATEST_TAG}" > ${LATEST_TAG}.txt
          echo "::set-output name=latest_tag::${LATEST_TAG}"
          echo "::set-output name=download_url::${DOWNLOAD_URL}"
          echo "::set-output name=version_info::${VERSION_INFO}"
      - name: Load version from cache
        id: version_check
        uses: actions/cache@v2
        with:
          path: ${{ steps.version_info.outputs.latest_tag }}.txt
          key: cached_version
      - name: Should we start new build?
        id: should_build
        if: steps.version_check.outputs.cache-hit != 'true'
        run: echo "::set-output name=should_build::true"
      - name: Create Release
        id: create_release
        if: steps.should_build.outputs.should_build
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version_info.outputs.latest_tag }}
          release_name: Release Aseprite ${{ steps.version_info.outputs.latest_tag }}
          body: |
            ${{ steps.version_info.outputs.version_info }}
          draft: true
          prerelease: false

  build-aseprite:
    name: Build Aseprite
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build }}
    runs-on: windows-2022
    steps:
      - name: Setup MSBuild path
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: '17.0'  # This corresponds to Visual Studio 2022
      - name: Set architecture for the produced binary
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
        shell: cmd
      - name: Download Aseprite release
        run: |
          curl -o Aseprite-source.zip -L ${{ needs.check-version.outputs.download_url }}
          unzip Aseprite-source.zip -d aseprite
          mkdir -p aseprite/build
      - name: Install Ninja build system
        run: choco install ninja
      - name: Set up Skia dependencies
        run: |
          curl -L https://github.com/aseprite/skia/releases/download/m102-861e4743af/Skia-Windows-Release-x64.zip -o skia.zip
          unzip skia.zip -d skia
      - name: Patch city.cc to replace byteswap.h
        run: |
          sed -i '1s/^/#define bswap_32(x) __builtin_bswap32(x)\n#define bswap_64(x) __builtin_bswap64(x)\n/' aseprite/third_party/cityhash/src/city.cc
          sed -i 's/#include <byteswap.h>/\/\/ #include <byteswap.h>/' aseprite/third_party/cityhash/src/city.cc
      - name: Patch clip_win_wic.cpp to use CLSID_WICPngDecoder
        run: |
          sed -i 's/CLSID_WICPngDecoder2/CLSID_WICPngDecoder/g' aseprite/laf/clip/clip_win_wic.cpp
          sed -i 's/CLSID_WICPngDecoder1/CLSID_WICPngDecoder/g' aseprite/laf/clip/clip_win_wic.cpp
      - name: Run CMake
        working-directory: aseprite/build
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DLAF_BACKEND=skia -DSKIA_DIR=${{ github.workspace }}/skia -DSKIA_LIBRARY_DIR=${{ github.workspace }}/skia/out/Release-x64 -DSKIA_LIBRARY=${{ github.workspace }}/skia/out/Release-x64/skia.lib -G Ninja -DCMAKE_MAKE_PROGRAM="C:/ProgramData/chocolatey/lib/ninja/tools/ninja.exe" -DCMAKE_IGNORE_PATH=C:/mingw64/bin ..
      - name: Run Ninja
        working-directory: aseprite/build
        run: ninja aseprite
      - name: Clean up build
        working-directory: aseprite/build/bin
        shell: bash
        run: rm -f gen modp_b64_gen gen.exe gen.exe.manifest modp_b64_gen.exe modp_b64_gen.exe.manifest
      - name: Make portable zip
        working-directory: aseprite/build/bin
        run: echo '# This file is here so Aseprite behaves as a portable program' > aseprite.ini
      - name: Create release
        working-directory: aseprite/build/bin
        run: 7z a -tzip Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip *
      - name: Upload release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.check-version.outputs.upload_url }}
          asset_path: aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
          asset_name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
          asset_content_type: application/zip
