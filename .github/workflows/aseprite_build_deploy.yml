name: Build and deploy Aseprite

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Type of build to trigger (e.g., Release, Debug)'
        required: false
        default: 'RelWithDebInfo'

env:
  BUILD_TYPE: ${{ github.event.inputs.build_type || 'RelWithDebInfo' }}
  SKIA_VERSION: aseprite-m102

jobs:
  check-version:
    name: Check latest Aseprite release
    runs-on: ubuntu-latest
    outputs:
      download_url: ${{ steps.version_info.outputs.download_url }}
      latest_tag: ${{ steps.version_info.outputs.latest_tag }}
      should_build: ${{ steps.should_build.outputs.should_build }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Get latest version info
      id: version_info
      run: |
        data=$(curl -sL https://api.github.com/repos/aseprite/aseprite/releases/latest)
        LATEST_TAG=$(echo "${data}" | jq -r '.tag_name')
        DOWNLOAD_URL=$(echo "${data}" | jq -r '.assets[].browser_download_url')
        VERSION_INFO=$(echo "${data}" | jq -r '.body')
        
        echo "${LATEST_TAG}" > ${LATEST_TAG}.txt
        echo "::set-output name=latest_tag::${LATEST_TAG}"
        echo "::set-output name=download_url::${DOWNLOAD_URL}"
        echo "::set-output name=version_info::${VERSION_INFO}"
    - name: Load version from cache
      id: version_check
      uses: actions/cache@v2
      with:
        path: ${{ steps.version_info.outputs.latest_tag }}.txt
        key: cached_version
    - name: Should we start new build?
      id: should_build
      if: steps.version_check.outputs.cache-hit != 'true'
      run: echo "::set-output name=should_build::true"
    - name: Create Release
      id: create_release
      if: steps.should_build.outputs.should_build
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version_info.outputs.latest_tag }}
        release_name: Release Aseprite ${{ steps.version_info.outputs.latest_tag }}
        body: |
          ${{ steps.version_info.outputs.version_info }}
        draft: true
        prerelease: false

  build-aseprite:
    name: Build Aseprite
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build }}
    strategy:
       matrix:
         os: [windows-latest, ubuntu-latest, macOS-latest]
       fail-fast: false    
    steps:
      # Windows setup
      - name: (Windows) Install dependencies
        if: matrix.os == 'windows-latest'
        uses: seanmiddleditch/gha-setup-ninja@v1

      - name: (Windows) Download and Install Skia
        if: matrix.os == 'windows-latest'
        run: |
          curl -LO https://github.com/aseprite/skia/releases/download/${{ env.SKIA_VERSION }}/Skia-Windows-Release-x64.zip
          7z x Skia-Windows-Release-x64.zip -oC:\deps\skia
        shell: cmd

      - name: (Windows) Setup Visual Studio Environment
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: call "C:\Program Files\Microsoft Visual Studio\2022\Community\Common7\Tools\VsDevCmd.bat" -arch=x64

      - name: (Windows) Run CMake
        if: matrix.os == 'windows-latest'
        working-directory: aseprite/build
        shell: cmd
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DLAF_BACKEND=skia -DSKIA_DIR=C:/deps/skia -DSKIA_LIBRARY_DIR=C:/deps/skia/out/Release-x64 -G Ninja ..

      - name: (Windows) Run Ninja
        if: matrix.os == 'windows-latest'
        working-directory: aseprite/build
        shell: cmd
        run: ninja aseprite

      # macOS setup
      - name: (macOS) Install dependencies
        if: matrix.os == 'macOS-latest'
        run: brew install ninja p7zip

      - name: (macOS) Download and Install Skia
        if: matrix.os == 'macOS-latest'
        run: |
          curl -LO https://github.com/aseprite/skia/releases/download/${{ env.SKIA_VERSION }}/Skia-macOS-Release-x64.zip
          7z x Skia-macOS-Release-x64.zip -o$HOME/deps/skia

      - name: (macOS) Run CMake
        if: matrix.os == 'macOS-latest'
        working-directory: aseprite/build
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DCMAKE_OSX_SYSROOT=$(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk -DLAF_BACKEND=skia -DSKIA_DIR=$HOME/deps/skia -DSKIA_LIBRARY_DIR=$HOME/deps/skia/out/Release-x64 -G Ninja ..

      - name: (macOS) Run Ninja
        if: matrix.os == 'macOS-latest'
        working-directory: aseprite/build
        run: ninja aseprite

      # Ubuntu/Linux setup
      - name: (Ubuntu) Install dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y g++ clang libc++-dev libc++abi-dev cmake ninja-build libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev

      - name: (Ubuntu) Download and Install Skia
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -LO https://github.com/aseprite/skia/releases/download/${{ env.SKIA_VERSION }}/Skia-Linux-Release-x64.zip
          7z x Skia-Linux-Release-x64.zip -o$HOME/deps/skia

      - name: (Ubuntu) Run CMake
        if: matrix.os == 'ubuntu-latest'
        working-directory: aseprite/build
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_CXX_FLAGS:STRING=-stdlib=libc++ -DCMAKE_EXE_LINKER_FLAGS:STRING=-stdlib=libc++ -DLAF_BACKEND=skia -DSKIA_DIR=$HOME/deps/skia -DSKIA_LIBRARY_DIR=$HOME/deps/skia/out/Release-x64 -G Ninja ..

      - name: (Ubuntu) Run Ninja
        if: matrix.os == 'ubuntu-latest'
        working-directory: aseprite/build
        run: ninja aseprite

      # Common post-build steps
      - name: Upload release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.check-version.outputs.upload_url }}
          asset_path: aseprite/build/bin/Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
          asset_name: Aseprite-${{ needs.check-version.outputs.latest_tag }}-${{ runner.os }}.zip
          asset_content_type: application/zip
